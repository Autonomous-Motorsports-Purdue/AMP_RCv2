
AMP_RCv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bdc  08003bdc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bdc  08003bdc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c3c6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a2c  00000000  00000000  0002c445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009e0  00000000  00000000  0002de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007b2  00000000  00000000  0002e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ab24  00000000  00000000  0002f00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cc7f  00000000  00000000  00049b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a09f5  00000000  00000000  000567ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002838  00000000  00000000  000f71a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f99dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b8c 	.word	0x08003b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b8c 	.word	0x08003b8c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc38 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80b 	bl	80001ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9a2 	bl	800051c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f970 	bl	80004bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001dc:	f000 f930 	bl	8000440 <MX_SPI1_Init>
  MX_ADC1_Init();
 80001e0:	f000 f860 	bl	80002a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e4:	f000 f8ce 	bl	8000384 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <main+0x20>

080001ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b096      	sub	sp, #88	; 0x58
 80001ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001f4:	2228      	movs	r2, #40	; 0x28
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f003 fc9a 	bl	8003b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fe:	f107 031c 	add.w	r3, r7, #28
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
 800021c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000222:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fc9d 	bl	8001b84 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000250:	f000 fa18 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	f107 031c 	add.w	r3, r7, #28
 800026e:	2102      	movs	r1, #2
 8000270:	4618      	mov	r0, r3
 8000272:	f002 fcc5 	bl	8002c00 <HAL_RCC_ClockConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800027c:	f000 fa02 	bl	8000684 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000288:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f002 feed 	bl	800306c <HAL_RCCEx_PeriphCLKConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000298:	f000 f9f4 	bl	8000684 <Error_Handler>
  }
}
 800029c:	bf00      	nop
 800029e:	3758      	adds	r7, #88	; 0x58
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002aa:	f107 031c 	add.w	r3, r7, #28
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
 80002c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c6:	4b2e      	ldr	r3, [pc, #184]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f4:	4b22      	ldr	r3, [pc, #136]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fa:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_ADC1_Init+0xdc>)
 8000302:	2201      	movs	r2, #1
 8000304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_ADC1_Init+0xdc>)
 8000310:	2204      	movs	r2, #4
 8000312:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_ADC1_Init+0xdc>)
 8000316:	2200      	movs	r2, #0
 8000318:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000320:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_ADC1_Init+0xdc>)
 8000322:	f000 fbf3 	bl	8000b0c <HAL_ADC_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800032c:	f000 f9aa 	bl	8000684 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000330:	2300      	movs	r3, #0
 8000332:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	4619      	mov	r1, r3
 800033a:	4811      	ldr	r0, [pc, #68]	; (8000380 <MX_ADC1_Init+0xdc>)
 800033c:	f001 f836 	bl	80013ac <HAL_ADCEx_MultiModeConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000346:	f000 f99d 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800034a:	2301      	movs	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034e:	2301      	movs	r3, #1
 8000350:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <MX_ADC1_Init+0xdc>)
 8000368:	f000 fd62 	bl	8000e30 <HAL_ADC_ConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000372:	f000 f987 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	3728      	adds	r7, #40	; 0x28
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000028 	.word	0x20000028

08000384 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	463b      	mov	r3, r7
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_ADC2_Init+0xb4>)
 800039c:	4a27      	ldr	r2, [pc, #156]	; (800043c <MX_ADC2_Init+0xb8>)
 800039e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ac:	4b22      	ldr	r3, [pc, #136]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003b2:	4b21      	ldr	r3, [pc, #132]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003f2:	4811      	ldr	r0, [pc, #68]	; (8000438 <MX_ADC2_Init+0xb4>)
 80003f4:	f000 fb8a 	bl	8000b0c <HAL_ADC_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80003fe:	f000 f941 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000402:	2302      	movs	r3, #2
 8000404:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000406:	2301      	movs	r3, #1
 8000408:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800041a:	463b      	mov	r3, r7
 800041c:	4619      	mov	r1, r3
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <MX_ADC2_Init+0xb4>)
 8000420:	f000 fd06 	bl	8000e30 <HAL_ADC_ConfigChannel>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800042a:	f000 f92b 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000078 	.word	0x20000078
 800043c:	50000100 	.word	0x50000100

08000440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_SPI1_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_SPI1_Init+0x74>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI1_Init+0x74>)
 800045a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800045e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI1_Init+0x74>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000476:	2220      	movs	r2, #32
 8000478:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI1_Init+0x74>)
 800048e:	2207      	movs	r2, #7
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI1_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_SPI1_Init+0x74>)
 80004a0:	f002 ff0a 	bl	80032b8 <HAL_SPI_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f000 f8eb 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000c8 	.word	0x200000c8
 80004b8:	40013000 	.word	0x40013000

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <MX_USART2_UART_Init+0x5c>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_USART2_UART_Init+0x58>)
 8000500:	f002 ff7d 	bl	80033fe <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 f8bb 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000012c 	.word	0x2000012c
 8000518:	40004400 	.word	0x40004400

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000532:	4b51      	ldr	r3, [pc, #324]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a50      	ldr	r2, [pc, #320]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b4e      	ldr	r3, [pc, #312]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b4b      	ldr	r3, [pc, #300]	; (8000678 <MX_GPIO_Init+0x15c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a4a      	ldr	r2, [pc, #296]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b48      	ldr	r3, [pc, #288]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b45      	ldr	r3, [pc, #276]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a44      	ldr	r2, [pc, #272]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b42      	ldr	r3, [pc, #264]	; (8000678 <MX_GPIO_Init+0x15c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_NSS_Pin|OLED_NSS_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f001 fac2 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2130      	movs	r1, #48	; 0x30
 800058c:	483b      	ldr	r0, [pc, #236]	; (800067c <MX_GPIO_Init+0x160>)
 800058e:	f001 fabd 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = BTN_DOWN_Pin;
 8000592:	2302      	movs	r3, #2
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000596:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_DOWN_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4836      	ldr	r0, [pc, #216]	; (8000680 <MX_GPIO_Init+0x164>)
 80005a8:	f001 f93e 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_RIGHT_Pin BTN_DOWNA8_Pin LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin|BTN_DOWNA8_Pin|LORA_DIO0_Pin;
 80005ac:	f241 1308 	movw	r3, #4360	; 0x1108
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f001 f92f 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_L_SW_Pin BTN_LEFT_Pin BTN_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_L_SW_Pin|BTN_LEFT_Pin|BTN_UP_Pin;
 80005ca:	23c1      	movs	r3, #193	; 0xc1
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4827      	ldr	r0, [pc, #156]	; (800067c <MX_GPIO_Init+0x160>)
 80005e0:	f001 f922 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin OLED_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin|OLED_NSS_Pin;
 80005e4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f001 f912 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 8000604:	2330      	movs	r3, #48	; 0x30
 8000606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	4619      	mov	r1, r3
 800061a:	4818      	ldr	r0, [pc, #96]	; (800067c <MX_GPIO_Init+0x160>)
 800061c:	f001 f904 	bl	8001828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2006      	movs	r0, #6
 8000626:	f001 f8c8 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800062a:	2006      	movs	r0, #6
 800062c:	f001 f8e1 	bl	80017f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2007      	movs	r0, #7
 8000636:	f001 f8c0 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800063a:	2007      	movs	r0, #7
 800063c:	f001 f8d9 	bl	80017f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2009      	movs	r0, #9
 8000646:	f001 f8b8 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800064a:	2009      	movs	r0, #9
 800064c:	f001 f8d1 	bl	80017f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2017      	movs	r0, #23
 8000656:	f001 f8b0 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800065a:	2017      	movs	r0, #23
 800065c:	f001 f8c9 	bl	80017f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	f001 f8a8 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066a:	2028      	movs	r0, #40	; 0x28
 800066c:	f001 f8c1 	bl	80017f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	48000400 	.word	0x48000400
 8000680:	48001400 	.word	0x48001400

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006f8:	d12e      	bne.n	8000758 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80006fa:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <HAL_ADC_MspInit+0xf0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a31      	ldr	r2, [pc, #196]	; (80007c8 <HAL_ADC_MspInit+0xf0>)
 8000702:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000704:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <HAL_ADC_MspInit+0xf0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d10b      	bne.n	8000724 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800070c:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4a2e      	ldr	r2, [pc, #184]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6153      	str	r3, [r2, #20]
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 800072a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072e:	6153      	str	r3, [r2, #20]
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOYSTICK_L_H_Pin|JOYSTICK_L_V_Pin;
 800073c:	2303      	movs	r3, #3
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 f869 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000756:	e032      	b.n	80007be <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <HAL_ADC_MspInit+0xf8>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12d      	bne.n	80007be <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <HAL_ADC_MspInit+0xf0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_ADC_MspInit+0xf0>)
 800076a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_ADC_MspInit+0xf0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10b      	bne.n	800078c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6153      	str	r3, [r2, #20]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 8000792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000796:	6153      	str	r3, [r2, #20]
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_ADC_MspInit+0xf4>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JOYSTICK_R_V_Pin|JOYSTICK_R_H_Pin;
 80007a4:	2330      	movs	r3, #48	; 0x30
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 f835 	bl	8001828 <HAL_GPIO_Init>
}
 80007be:	bf00      	nop
 80007c0:	3730      	adds	r7, #48	; 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001b4 	.word	0x200001b4
 80007cc:	40021000 	.word	0x40021000
 80007d0:	50000100 	.word	0x50000100

080007d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <HAL_SPI_MspInit+0xb4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d144      	bne.n	8000880 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <HAL_SPI_MspInit+0xb8>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <HAL_SPI_MspInit+0xb8>)
 80007fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <HAL_SPI_MspInit+0xb8>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <HAL_SPI_MspInit+0xb8>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_SPI_MspInit+0xb8>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083e:	23c0      	movs	r3, #192	; 0xc0
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800084e:	2305      	movs	r3, #5
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 ffe4 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000860:	2308      	movs	r3, #8
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000870:	2305      	movs	r3, #5
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_SPI_MspInit+0xbc>)
 800087c:	f000 ffd4 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40013000 	.word	0x40013000
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x80>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d129      	bne.n	800090a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80008e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f8:	2307      	movs	r3, #7
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 ff8f 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8b0 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_L_SW_Pin);
 8000974:	2001      	movs	r0, #1
 8000976:	f001 f8e1 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}

0800097e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_DOWN_Pin);
 8000982:	2002      	movs	r0, #2
 8000984:	f001 f8da 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8000990:	2008      	movs	r0, #8
 8000992:	f001 f8d3 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 800099e:	2040      	movs	r0, #64	; 0x40
 80009a0:	f001 f8cc 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_UP_Pin);
 80009a4:	2080      	movs	r0, #128	; 0x80
 80009a6:	f001 f8c9 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_DOWNA8_Pin);
 80009aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009ae:	f001 f8c5 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80009ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009be:	f001 f8bd 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff ffea 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f003 f893 	bl	8003b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fbd3 	bl	80001c8 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08003be4 	.word	0x08003be4
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	200001bc 	.word	0x200001bc

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 fea7 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe18 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 febf 	bl	800180e <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f000 fe87 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	200001b8 	.word	0x200001b8

08000af4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200001b8 	.word	0x200001b8

08000b0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09a      	sub	sp, #104	; 0x68
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e172      	b.n	8000e12 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d176      	bne.n	8000c2c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d152      	bne.n	8000bec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fdb9 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d13b      	bne.n	8000bec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fcdf 	bl	8001538 <ADC_Disable>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d12f      	bne.n	8000bec <HAL_ADC_Init+0xe0>
 8000b8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d12b      	bne.n	8000bec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b9c:	f023 0302 	bic.w	r3, r3, #2
 8000ba0:	f043 0202 	orr.w	r2, r3, #2
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bb6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bc6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bc8:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <HAL_ADC_Init+0x310>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a94      	ldr	r2, [pc, #592]	; (8000e20 <HAL_ADC_Init+0x314>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0c9a      	lsrs	r2, r3, #18
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bde:	e002      	b.n	8000be6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f9      	bne.n	8000be0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c08:	d110      	bne.n	8000c2c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f023 0312 	bic.w	r3, r3, #18
 8000c12:	f043 0210 	orr.w	r2, r3, #16
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f043 0201 	orr.w	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f040 80df 	bne.w	8000df8 <HAL_ADC_Init+0x2ec>
 8000c3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 80da 	bne.w	8000df8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 80d2 	bne.w	8000df8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c5c:	f043 0202 	orr.w	r2, r3, #2
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c64:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_ADC_Init+0x318>)
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c70:	d102      	bne.n	8000c78 <HAL_ADC_Init+0x16c>
 8000c72:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <HAL_ADC_Init+0x31c>)
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e002      	b.n	8000c7e <HAL_ADC_Init+0x172>
 8000c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c7c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d108      	bne.n	8000c9e <HAL_ADC_Init+0x192>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <HAL_ADC_Init+0x192>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_ADC_Init+0x194>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11c      	bne.n	8000cde <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d010      	beq.n	8000ccc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d107      	bne.n	8000cc6 <HAL_ADC_Init+0x1ba>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x1ba>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_ADC_Init+0x1bc>
 8000cc6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d108      	bne.n	8000cde <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cdc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e5b      	ldrb	r3, [r3, #25]
 8000ce2:	035b      	lsls	r3, r3, #13
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ce8:	2a01      	cmp	r2, #1
 8000cea:	d002      	beq.n	8000cf2 <HAL_ADC_Init+0x1e6>
 8000cec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf0:	e000      	b.n	8000cf4 <HAL_ADC_Init+0x1e8>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d04:	4313      	orrs	r3, r2
 8000d06:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d11b      	bne.n	8000d4a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7e5b      	ldrb	r3, [r3, #25]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d109      	bne.n	8000d2e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	045a      	lsls	r2, r3, #17
 8000d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d24:	4313      	orrs	r3, r2
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2a:	663b      	str	r3, [r7, #96]	; 0x60
 8000d2c:	e00d      	b.n	8000d4a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d36:	f043 0220 	orr.w	r2, r3, #32
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f043 0201 	orr.w	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d007      	beq.n	8000d62 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d114      	bne.n	8000d9a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
 8000d82:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7e1b      	ldrb	r3, [r3, #24]
 8000d88:	039a      	lsls	r2, r3, #14
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4313      	orrs	r3, r2
 8000d94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d96:	4313      	orrs	r3, r2
 8000d98:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <HAL_ADC_Init+0x320>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000daa:	430b      	orrs	r3, r1
 8000dac:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10c      	bne.n	8000dd0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f023 010f 	bic.w	r1, r3, #15
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dce:	e007      	b.n	8000de0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020f 	bic.w	r2, r2, #15
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	f043 0201 	orr.w	r2, r3, #1
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40
 8000df6:	e00a      	b.n	8000e0e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f023 0312 	bic.w	r3, r3, #18
 8000e00:	f043 0210 	orr.w	r2, r3, #16
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3768      	adds	r7, #104	; 0x68
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	431bde83 	.word	0x431bde83
 8000e24:	50000300 	.word	0x50000300
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	fff0c007 	.word	0xfff0c007

08000e30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b09b      	sub	sp, #108	; 0x6c
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d101      	bne.n	8000e52 <HAL_ADC_ConfigChannel+0x22>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e2a1      	b.n	8001396 <HAL_ADC_ConfigChannel+0x566>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 8285 	bne.w	8001374 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d81c      	bhi.n	8000eac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	461a      	mov	r2, r3
 8000e86:	231f      	movs	r3, #31
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4019      	ands	r1, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eaa:	e063      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	d81e      	bhi.n	8000ef2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	3b1e      	subs	r3, #30
 8000ec8:	221f      	movs	r2, #31
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4019      	ands	r1, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	3b1e      	subs	r3, #30
 8000ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef0:	e040      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b0e      	cmp	r3, #14
 8000ef8:	d81e      	bhi.n	8000f38 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	3b3c      	subs	r3, #60	; 0x3c
 8000f0e:	221f      	movs	r2, #31
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4019      	ands	r1, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	3b3c      	subs	r3, #60	; 0x3c
 8000f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38
 8000f36:	e01d      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	3b5a      	subs	r3, #90	; 0x5a
 8000f4c:	221f      	movs	r2, #31
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4019      	ands	r1, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	3b5a      	subs	r3, #90	; 0x5a
 8000f68:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 80e5 	bne.w	800114e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b09      	cmp	r3, #9
 8000f8a:	d91c      	bls.n	8000fc6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6999      	ldr	r1, [r3, #24]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b1e      	subs	r3, #30
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6898      	ldr	r0, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b1e      	subs	r3, #30
 8000fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	e019      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6959      	ldr	r1, [r3, #20]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4019      	ands	r1, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	3b01      	subs	r3, #1
 8001018:	2b03      	cmp	r3, #3
 800101a:	d84f      	bhi.n	80010bc <HAL_ADC_ConfigChannel+0x28c>
 800101c:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <HAL_ADC_ConfigChannel+0x1f4>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001035 	.word	0x08001035
 8001028:	08001057 	.word	0x08001057
 800102c:	08001079 	.word	0x08001079
 8001030:	0800109b 	.word	0x0800109b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800103a:	4b9c      	ldr	r3, [pc, #624]	; (80012ac <HAL_ADC_ConfigChannel+0x47c>)
 800103c:	4013      	ands	r3, r2
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	0691      	lsls	r1, r2, #26
 8001044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001046:	430a      	orrs	r2, r1
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001052:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001054:	e07b      	b.n	800114e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800105c:	4b93      	ldr	r3, [pc, #588]	; (80012ac <HAL_ADC_ConfigChannel+0x47c>)
 800105e:	4013      	ands	r3, r2
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	0691      	lsls	r1, r2, #26
 8001066:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001068:	430a      	orrs	r2, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001074:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001076:	e06a      	b.n	800114e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800107e:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_ADC_ConfigChannel+0x47c>)
 8001080:	4013      	ands	r3, r2
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	0691      	lsls	r1, r2, #26
 8001088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800108a:	430a      	orrs	r2, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001096:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001098:	e059      	b.n	800114e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010a0:	4b82      	ldr	r3, [pc, #520]	; (80012ac <HAL_ADC_ConfigChannel+0x47c>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	0691      	lsls	r1, r2, #26
 80010aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010ac:	430a      	orrs	r2, r1
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010b8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010ba:	e048      	b.n	800114e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	069b      	lsls	r3, r3, #26
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d107      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010de:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	069b      	lsls	r3, r3, #26
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d107      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001102:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800110a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	069b      	lsls	r3, r3, #26
 8001114:	429a      	cmp	r2, r3
 8001116:	d107      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001126:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800112e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	069b      	lsls	r3, r3, #26
 8001138:	429a      	cmp	r2, r3
 800113a:	d107      	bne.n	800114c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800114a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800114c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_ADC_ConfigChannel+0x33e>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_ADC_ConfigChannel+0x33e>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_ADC_ConfigChannel+0x340>
 800116e:	2300      	movs	r3, #0
 8001170:	2b00      	cmp	r3, #0
 8001172:	f040 810a 	bne.w	800138a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d00f      	beq.n	800119e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43da      	mvns	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800119c:	e049      	b.n	8001232 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	409a      	lsls	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	d91c      	bls.n	80011fa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6999      	ldr	r1, [r3, #24]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	3b1b      	subs	r3, #27
 80011d2:	2207      	movs	r2, #7
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	3b1b      	subs	r3, #27
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	619a      	str	r2, [r3, #24]
 80011f8:	e01b      	b.n	8001232 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6959      	ldr	r1, [r3, #20]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	2207      	movs	r2, #7
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	4019      	ands	r1, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6898      	ldr	r0, [r3, #8]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	fa00 f203 	lsl.w	r2, r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <HAL_ADC_ConfigChannel+0x480>)
 8001234:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d105      	bne.n	800124a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800123e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800124e:	2b11      	cmp	r3, #17
 8001250:	d105      	bne.n	800125e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001262:	2b12      	cmp	r3, #18
 8001264:	f040 8091 	bne.w	800138a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001270:	2b00      	cmp	r3, #0
 8001272:	f040 808a 	bne.w	800138a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800127e:	d102      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x456>
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_ADC_ConfigChannel+0x484>)
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e002      	b.n	800128c <HAL_ADC_ConfigChannel+0x45c>
 8001286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800128a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10e      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x488>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x488>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e006      	b.n	80012ba <HAL_ADC_ConfigChannel+0x48a>
 80012ac:	83fff000 	.word	0x83fff000
 80012b0:	50000300 	.word	0x50000300
 80012b4:	50000100 	.word	0x50000100
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d150      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012be:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d010      	beq.n	80012e6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x4b0>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x4b0>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x4b2>
 80012e0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d13c      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d11d      	bne.n	800132a <HAL_ADC_ConfigChannel+0x4fa>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f6:	d118      	bne.n	800132a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80012f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001302:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_ADC_ConfigChannel+0x574>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_ADC_ConfigChannel+0x578>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9a      	lsrs	r2, r3, #18
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800131a:	e002      	b.n	8001322 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3b01      	subs	r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f9      	bne.n	800131c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001328:	e02e      	b.n	8001388 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b11      	cmp	r3, #17
 8001330:	d10b      	bne.n	800134a <HAL_ADC_ConfigChannel+0x51a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133a:	d106      	bne.n	800134a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800133c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001346:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001348:	e01e      	b.n	8001388 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d11a      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800135a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800135e:	e013      	b.n	8001388 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f043 0220 	orr.w	r2, r3, #32
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001372:	e00a      	b.n	800138a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f043 0220 	orr.w	r2, r3, #32
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001386:	e000      	b.n	800138a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001388:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001396:	4618      	mov	r0, r3
 8001398:	376c      	adds	r7, #108	; 0x6c
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b099      	sub	sp, #100	; 0x64
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c4:	d102      	bne.n	80013cc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80013c6:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	e002      	b.n	80013d2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80013cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013d0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0a2      	b.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e09b      	b.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d17f      	bne.n	8001500 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d179      	bne.n	8001500 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140c:	4b49      	ldr	r3, [pc, #292]	; (8001534 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800140e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d040      	beq.n	800149a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800142a:	035b      	lsls	r3, r3, #13
 800142c:	430b      	orrs	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001432:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001454:	2300      	movs	r3, #0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d15c      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001476:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001478:	2b00      	cmp	r3, #0
 800147a:	d14b      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800147c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001484:	f023 030f 	bic.w	r3, r3, #15
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	6811      	ldr	r1, [r2, #0]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	6892      	ldr	r2, [r2, #8]
 8001490:	430a      	orrs	r2, r1
 8001492:	431a      	orrs	r2, r3
 8001494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001496:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001498:	e03c      	b.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800149a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d108      	bne.n	80014c6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80014c6:	2300      	movs	r3, #0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d123      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80014e8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d112      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014f6:	f023 030f 	bic.w	r3, r3, #15
 80014fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014fc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014fe:	e009      	b.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f043 0220 	orr.w	r2, r3, #32
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001512:	e000      	b.n	8001516 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001514:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800151e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001522:	4618      	mov	r0, r3
 8001524:	3764      	adds	r7, #100	; 0x64
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	50000100 	.word	0x50000100
 8001534:	50000300 	.word	0x50000300

08001538 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <ADC_Disable+0x2c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <ADC_Disable+0x2c>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <ADC_Disable+0x2e>
 8001564:	2300      	movs	r3, #0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d047      	beq.n	80015fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030d 	and.w	r3, r3, #13
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10f      	bne.n	8001598 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0202 	orr.w	r2, r2, #2
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2203      	movs	r2, #3
 800158e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001590:	f7ff fab0 	bl	8000af4 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001596:	e029      	b.n	80015ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f043 0210 	orr.w	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e023      	b.n	80015fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015b4:	f7ff fa9e 	bl	8000af4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d914      	bls.n	80015ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10d      	bne.n	80015ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f043 0210 	orr.w	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e007      	b.n	80015fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d0dc      	beq.n	80015b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e14e      	b.n	8001ad6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8140 	beq.w	8001ad0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d005      	beq.n	8001868 <HAL_GPIO_Init+0x40>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d130      	bne.n	80018ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800189e:	2201      	movs	r2, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 0201 	and.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d017      	beq.n	8001906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d123      	bne.n	800195a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	6939      	ldr	r1, [r7, #16]
 8001956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0203 	and.w	r2, r3, #3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 809a 	beq.w	8001ad0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199c:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b4:	4a50      	ldr	r2, [pc, #320]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019de:	d013      	beq.n	8001a08 <HAL_GPIO_Init+0x1e0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_GPIO_Init+0x2d4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00d      	beq.n	8001a04 <HAL_GPIO_Init+0x1dc>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a45      	ldr	r2, [pc, #276]	; (8001b00 <HAL_GPIO_Init+0x2d8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0x1d8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a44      	ldr	r2, [pc, #272]	; (8001b04 <HAL_GPIO_Init+0x2dc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_GPIO_Init+0x1d4>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e004      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_GPIO_Init+0x1e2>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a1a:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a28:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a4c:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a76:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_GPIO_Init+0x2e0>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f aea9 	bne.w	8001838 <HAL_GPIO_Init+0x10>
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	48000800 	.word	0x48000800
 8001b04:	48000c00 	.word	0x48000c00
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f806 	bl	8001b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f001 b823 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 817d 	beq.w	8001eba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bc0:	4bbc      	ldr	r3, [pc, #752]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d00c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bcc:	4bb9      	ldr	r3, [pc, #740]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d15c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x10e>
 8001bd8:	4bb6      	ldr	r3, [pc, #728]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d155      	bne.n	8001c92 <HAL_RCC_OscConfig+0x10e>
 8001be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bfa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0x94>
 8001c12:	4ba8      	ldr	r3, [pc, #672]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e015      	b.n	8001c44 <HAL_RCC_OscConfig+0xc0>
 8001c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c40:	4b9c      	ldr	r3, [pc, #624]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c50:	fa92 f2a2 	rbit	r2, r2
 8001c54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 811f 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 8116 	bne.w	8001eb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f000 bfaf 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12e>
 8001ca4:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a82      	ldr	r2, [pc, #520]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e036      	b.n	8001d20 <HAL_RCC_OscConfig+0x19c>
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x158>
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7b      	ldr	r2, [pc, #492]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a78      	ldr	r2, [pc, #480]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e021      	b.n	8001d20 <HAL_RCC_OscConfig+0x19c>
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x184>
 8001cee:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a70      	ldr	r2, [pc, #448]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x19c>
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a69      	ldr	r2, [pc, #420]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a66      	ldr	r2, [pc, #408]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d20:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f023 020f 	bic.w	r2, r3, #15
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	495f      	ldr	r1, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d059      	beq.n	8001dfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe fed3 	bl	8000af4 <HAL_GetTick>
 8001d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d54:	f7fe fece 	bl	8000af4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d902      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	f000 bf43 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8001d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x218>
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e015      	b.n	8001dc8 <HAL_RCC_OscConfig+0x244>
 8001d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001db8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dcc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001dd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001dd4:	fa92 f2a2 	rbit	r2, r2
 8001dd8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ddc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ab      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1d0>
 8001dfc:	e05d      	b.n	8001eba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fe79 	bl	8000af4 <HAL_GetTick>
 8001e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e08:	f7fe fe74 	bl	8000af4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b64      	cmp	r3, #100	; 0x64
 8001e16:	d902      	bls.n	8001e1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	f000 bee9 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2cc>
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e015      	b.n	8001e7c <HAL_RCC_OscConfig+0x2f8>
 8001e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e88:	fa92 f2a2 	rbit	r2, r2
 8001e8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	f042 0220 	orr.w	r2, r2, #32
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f002 021f 	and.w	r2, r2, #31
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ab      	bne.n	8001e08 <HAL_RCC_OscConfig+0x284>
 8001eb0:	e003      	b.n	8001eba <HAL_RCC_OscConfig+0x336>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 817d 	beq.w	80021ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ed0:	4ba6      	ldr	r3, [pc, #664]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001edc:	4ba3      	ldr	r3, [pc, #652]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d172      	bne.n	8001fce <HAL_RCC_OscConfig+0x44a>
 8001ee8:	4ba0      	ldr	r3, [pc, #640]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d16c      	bne.n	8001fce <HAL_RCC_OscConfig+0x44a>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	095b      	lsrs	r3, r3, #5
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_RCC_OscConfig+0x3a0>
 8001f1e:	4b93      	ldr	r3, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	e013      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c8>
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f48:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCC_OscConfig+0x410>
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f000 be2e 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b75      	ldr	r3, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	21f8      	movs	r1, #248	; 0xf8
 8001faa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fb2:	fa91 f1a1 	rbit	r1, r1
 8001fb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001fba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001fbe:	fab1 f181 	clz	r1, r1
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	408b      	lsls	r3, r1
 8001fc6:	4969      	ldr	r1, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fcc:	e0fd      	b.n	80021ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8088 	beq.w	80020f0 <HAL_RCC_OscConfig+0x56c>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ff2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	461a      	mov	r2, r3
 8002008:	2301      	movs	r3, #1
 800200a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fd72 	bl	8000af4 <HAL_GetTick>
 8002010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe fd6d 	bl	8000af4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d902      	bls.n	800202c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	f000 bde2 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
 800202c:	2302      	movs	r3, #2
 800202e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800203e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d102      	bne.n	800205c <HAL_RCC_OscConfig+0x4d8>
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x500>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002074:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2202      	movs	r2, #2
 8002086:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800208a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002096:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f042 0220 	orr.w	r2, r2, #32
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f002 021f 	and.w	r2, r2, #31
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0af      	beq.n	8002016 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	21f8      	movs	r1, #248	; 0xf8
 80020cc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020d4:	fa91 f1a1 	rbit	r1, r1
 80020d8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80020dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80020e0:	fab1 f181 	clz	r1, r1
 80020e4:	b2c9      	uxtb	r1, r1
 80020e6:	408b      	lsls	r3, r1
 80020e8:	4920      	ldr	r1, [pc, #128]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
 80020ee:	e06c      	b.n	80021ca <HAL_RCC_OscConfig+0x646>
 80020f0:	2301      	movs	r3, #1
 80020f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	461a      	mov	r2, r3
 8002118:	2300      	movs	r3, #0
 800211a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fcea 	bl	8000af4 <HAL_GetTick>
 8002120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002126:	f7fe fce5 	bl	8000af4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d902      	bls.n	800213c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	f000 bd5a 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800214e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d104      	bne.n	8002170 <HAL_RCC_OscConfig+0x5ec>
 8002166:	4b01      	ldr	r3, [pc, #4]	; (800216c <HAL_RCC_OscConfig+0x5e8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e015      	b.n	8002198 <HAL_RCC_OscConfig+0x614>
 800216c:	40021000 	.word	0x40021000
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002188:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002194:	4bc8      	ldr	r3, [pc, #800]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2202      	movs	r2, #2
 800219a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800219e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021ae:	fab2 f282 	clz	r2, r2
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f042 0220 	orr.w	r2, r2, #32
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ad      	bne.n	8002126 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8110 	beq.w	8002400 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d079      	beq.n	80022e4 <HAL_RCC_OscConfig+0x760>
 80021f0:	2301      	movs	r3, #1
 80021f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4bab      	ldr	r3, [pc, #684]	; (80024bc <HAL_RCC_OscConfig+0x938>)
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	461a      	mov	r2, r3
 8002216:	2301      	movs	r3, #1
 8002218:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7fe fc6b 	bl	8000af4 <HAL_GetTick>
 800221e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002224:	f7fe fc66 	bl	8000af4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d902      	bls.n	800223a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	f000 bcdb 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002254:	2202      	movs	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002278:	2202      	movs	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002292:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002294:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 8002296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022a0:	2102      	movs	r1, #2
 80022a2:	6019      	str	r1, [r3, #0]
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f1a3 	rbit	r1, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022ba:	6019      	str	r1, [r3, #0]
  return result;
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0a0      	beq.n	8002224 <HAL_RCC_OscConfig+0x6a0>
 80022e2:	e08d      	b.n	8002400 <HAL_RCC_OscConfig+0x87c>
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002310:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x938>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	2300      	movs	r3, #0
 8002324:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fbe5 	bl	8000af4 <HAL_GetTick>
 800232a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe fbe0 	bl	8000af4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d902      	bls.n	8002346 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	f000 bc55 	b.w	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800234e:	2202      	movs	r2, #2
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002372:	2202      	movs	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f2a3 	rbit	r2, r3
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 80023b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023be:	2102      	movs	r1, #2
 80023c0:	6019      	str	r1, [r3, #0]
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f1a3 	rbit	r1, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023d8:	6019      	str	r1, [r3, #0]
  return result;
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d197      	bne.n	8002330 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 81a1 	beq.w	8002758 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241c:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002432:	61d3      	str	r3, [r2, #28]
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800244e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_OscConfig+0x93c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11a      	bne.n	8002498 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_RCC_OscConfig+0x93c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_RCC_OscConfig+0x93c>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7fe fb41 	bl	8000af4 <HAL_GetTick>
 8002472:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	e009      	b.n	800248c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7fe fb3c 	bl	8000af4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e3b1      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_OscConfig+0x93c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ef      	beq.n	8002478 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCC_OscConfig+0x940>
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCC_OscConfig+0x934>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e03c      	b.n	8002530 <HAL_RCC_OscConfig+0x9ac>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	10908120 	.word	0x10908120
 80024c0:	40007000 	.word	0x40007000
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x96a>
 80024d4:	4bc1      	ldr	r3, [pc, #772]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4ac0      	ldr	r2, [pc, #768]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	4bbe      	ldr	r3, [pc, #760]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4abd      	ldr	r2, [pc, #756]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80024e6:	f023 0304 	bic.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	e020      	b.n	8002530 <HAL_RCC_OscConfig+0x9ac>
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x994>
 80024fe:	4bb7      	ldr	r3, [pc, #732]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4ab6      	ldr	r2, [pc, #728]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	4bb4      	ldr	r3, [pc, #720]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4ab3      	ldr	r2, [pc, #716]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0x9ac>
 8002518:	4bb0      	ldr	r3, [pc, #704]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4aaf      	ldr	r2, [pc, #700]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	4bad      	ldr	r3, [pc, #692]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4aac      	ldr	r2, [pc, #688]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 800252a:	f023 0304 	bic.w	r3, r3, #4
 800252e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8081 	beq.w	8002644 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fad7 	bl	8000af4 <HAL_GetTick>
 8002546:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe fad2 	bl	8000af4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e345      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025aa:	601a      	str	r2, [r3, #0]
  return result;
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_OscConfig+0xa4c>
 80025ca:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	e013      	b.n	80025f8 <HAL_RCC_OscConfig+0xa74>
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025d8:	2202      	movs	r2, #2
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	4b79      	ldr	r3, [pc, #484]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002600:	2102      	movs	r1, #2
 8002602:	6011      	str	r1, [r2, #0]
 8002604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002608:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	fa92 f1a2 	rbit	r1, r2
 8002612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002616:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800261a:	6011      	str	r1, [r2, #0]
  return result;
 800261c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002620:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d084      	beq.n	800254c <HAL_RCC_OscConfig+0x9c8>
 8002642:	e07f      	b.n	8002744 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe fa56 	bl	8000af4 <HAL_GetTick>
 8002648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fa51 	bl	8000af4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e2c4      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800266e:	2202      	movs	r2, #2
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002692:	2202      	movs	r2, #2
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026ac:	601a      	str	r2, [r3, #0]
  return result;
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d102      	bne.n	80026d2 <HAL_RCC_OscConfig+0xb4e>
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	e013      	b.n	80026fa <HAL_RCC_OscConfig+0xb76>
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002702:	2102      	movs	r1, #2
 8002704:	6011      	str	r1, [r2, #0]
 8002706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	fa92 f1a2 	rbit	r1, r2
 8002714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002718:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800271c:	6011      	str	r1, [r2, #0]
  return result;
 800271e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002722:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	fab2 f282 	clz	r2, r2
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f002 021f 	and.w	r2, r2, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f202 	lsl.w	r2, r1, r2
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d184      	bne.n	800264e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002744:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002756:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8242 	beq.w	8002bee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_RCC_OscConfig+0xc58>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	f000 8213 	beq.w	8002b9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 8162 	bne.w	8002a4e <HAL_RCC_OscConfig+0xeca>
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002792:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe f990 	bl	8000af4 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	e00c      	b.n	80027f4 <HAL_RCC_OscConfig+0xc70>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe f988 	bl	8000af4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1fd      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	fa93 f2a3 	rbit	r2, r3
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002818:	601a      	str	r2, [r3, #0]
  return result;
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002822:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_RCC_OscConfig+0xcba>
 8002838:	4bb0      	ldr	r3, [pc, #704]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e027      	b.n	800288e <HAL_RCC_OscConfig+0xd0a>
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800286c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fa93 f2a3 	rbit	r2, r3
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	4b9c      	ldr	r3, [pc, #624]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002892:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002896:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800289a:	6011      	str	r1, [r2, #0]
 800289c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	fa92 f1a2 	rbit	r1, r2
 80028aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028b2:	6011      	str	r1, [r2, #0]
  return result;
 80028b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	fab2 f282 	clz	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f002 021f 	and.w	r2, r2, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d182      	bne.n	80027e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	430b      	orrs	r3, r1
 80028fc:	497f      	ldr	r1, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800290a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800290e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002926:	601a      	str	r2, [r3, #0]
  return result;
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002930:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800293c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	461a      	mov	r2, r3
 8002944:	2301      	movs	r3, #1
 8002946:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe f8d4 	bl	8000af4 <HAL_GetTick>
 800294c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	e009      	b.n	8002966 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe f8cf 	bl	8000af4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e144      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800296e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800298a:	601a      	str	r2, [r3, #0]
  return result;
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002994:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe2c>
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e027      	b.n	8002a00 <HAL_RCC_OscConfig+0xe7c>
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a04:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a0c:	6011      	str	r1, [r2, #0]
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fa92 f1a2 	rbit	r1, r2
 8002a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a20:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a24:	6011      	str	r1, [r2, #0]
  return result;
 8002a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f042 0220 	orr.w	r2, r2, #32
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f002 021f 	and.w	r2, r2, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d082      	beq.n	8002952 <HAL_RCC_OscConfig+0xdce>
 8002a4c:	e0cf      	b.n	8002bee <HAL_RCC_OscConfig+0x106a>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe f82e 	bl	8000af4 <HAL_GetTick>
 8002a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe f829 	bl	8000af4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e09e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ad6:	601a      	str	r2, [r3, #0]
  return result;
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d104      	bne.n	8002b00 <HAL_RCC_OscConfig+0xf7c>
 8002af6:	4b01      	ldr	r3, [pc, #4]	; (8002afc <HAL_RCC_OscConfig+0xf78>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e029      	b.n	8002b50 <HAL_RCC_OscConfig+0xfcc>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	fa93 f2a3 	rbit	r2, r3
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x1078>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b54:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b5c:	6011      	str	r1, [r2, #0]
 8002b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b62:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	fa92 f1a2 	rbit	r1, r2
 8002b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b70:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b74:	6011      	str	r1, [r2, #0]
  return result;
 8002b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f042 0220 	orr.w	r2, r2, #32
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f002 021f 	and.w	r2, r2, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d180      	bne.n	8002a9e <HAL_RCC_OscConfig+0xf1a>
 8002b9c:	e027      	b.n	8002bee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e01e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_OscConfig+0x1078>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b09e      	sub	sp, #120	; 0x78
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e162      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b90      	ldr	r3, [pc, #576]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d910      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	498b      	ldr	r1, [pc, #556]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e14a      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	497f      	ldr	r1, [pc, #508]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80dc 	beq.w	8002e2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d13c      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xf6>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xa6>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e00f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0xc6>
 8002ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc2:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cce:	fa92 f2a2 	rbit	r2, r2
 8002cd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cd6:	fab2 f282 	clz	r2, r2
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f042 0220 	orr.w	r2, r2, #32
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f002 021f 	and.w	r2, r2, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d17b      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0f3      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d13c      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x178>
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x128>
 8002d22:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_ClockConfig+0x148>
 8002d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	f002 021f 	and.w	r2, r2, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d13a      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b2      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x1a0>
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	e00d      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1bc>
 8002da0:	2302      	movs	r3, #2
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	61ba      	str	r2, [r7, #24]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	617a      	str	r2, [r7, #20]
  return result;
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e079      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	491a      	ldr	r1, [pc, #104]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfc:	f7fd fe7a 	bl	8000af4 <HAL_GetTick>
 8002e00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fd fe76 	bl	8000af4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e061      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d214      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4906      	ldr	r1, [pc, #24]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e040      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	491a      	ldr	r1, [pc, #104]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4912      	ldr	r1, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ea2:	f000 f829 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb0:	22f0      	movs	r2, #240	; 0xf0
 8002eb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	60fa      	str	r2, [r7, #12]
  return result;
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	40d3      	lsrs	r3, r2
 8002ec6:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x2ec>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fdc8 	bl	8000a6c <HAL_InitTick>
  
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3778      	adds	r7, #120	; 0x78
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08003ba4 	.word	0x08003ba4
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x30>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x36>
 8002f26:	e03c      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f2a:	623b      	str	r3, [r7, #32]
      break;
 8002f2c:	e03c      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	607a      	str	r2, [r7, #4]
  return result;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	40d3      	lsrs	r3, r2
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	60fa      	str	r2, [r7, #12]
  return result;
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	40d3      	lsrs	r3, r2
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	e004      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	623b      	str	r3, [r7, #32]
      break;
 8002fa0:	e002      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fa4:	623b      	str	r3, [r7, #32]
      break;
 8002fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	372c      	adds	r7, #44	; 0x2c
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	007a1200 	.word	0x007a1200
 8002fc0:	08003bbc 	.word	0x08003bbc
 8002fc4:	08003bcc 	.word	0x08003bcc
 8002fc8:	003d0900 	.word	0x003d0900

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fea:	f7ff ffef 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fee:	4601      	mov	r1, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ffc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	fa92 f2a2 	rbit	r2, r2
 8003004:	603a      	str	r2, [r7, #0]
  return result;
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	fab2 f282 	clz	r2, r2
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	40d3      	lsrs	r3, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	08003bb4 	.word	0x08003bb4

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800302e:	f7ff ffcd 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003032:	4601      	mov	r1, r0
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800303c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003040:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	fa92 f2a2 	rbit	r2, r2
 8003048:	603a      	str	r2, [r7, #0]
  return result;
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	fab2 f282 	clz	r2, r2
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	40d3      	lsrs	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08003bb4 	.word	0x08003bb4

0800306c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b092      	sub	sp, #72	; 0x48
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80cd 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003090:	4b86      	ldr	r3, [pc, #536]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10e      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b83      	ldr	r3, [pc, #524]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4a82      	ldr	r2, [pc, #520]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	61d3      	str	r3, [r2, #28]
 80030a8:	4b80      	ldr	r3, [pc, #512]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a79      	ldr	r2, [pc, #484]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fd fd0f 	bl	8000af4 <HAL_GetTick>
 80030d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fd fd0b 	bl	8000af4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	; 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0db      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d07d      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003112:	429a      	cmp	r2, r3
 8003114:	d076      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	4b5e      	ldr	r3, [pc, #376]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	461a      	mov	r2, r3
 8003140:	2301      	movs	r3, #1
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003168:	4a50      	ldr	r2, [pc, #320]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800316a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d045      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fd fcbc 	bl	8000af4 <HAL_GetTick>
 800317c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fd fcb8 	bl	8000af4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e086      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003196:	2302      	movs	r3, #2
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	2302      	movs	r3, #2
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	61fb      	str	r3, [r7, #28]
  return result;
 80031ae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d102      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	e007      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2202      	movs	r2, #2
 80031dc:	613a      	str	r2, [r7, #16]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	fa92 f2a2 	rbit	r2, r2
 80031e4:	60fa      	str	r2, [r7, #12]
  return result;
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0bd      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003204:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4926      	ldr	r1, [pc, #152]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003212:	4313      	orrs	r3, r2
 8003214:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003216:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	491a      	ldr	r1, [pc, #104]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003244:	4313      	orrs	r3, r2
 8003246:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003254:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f023 0210 	bic.w	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4912      	ldr	r1, [pc, #72]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003262:	4313      	orrs	r3, r2
 8003264:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	490b      	ldr	r1, [pc, #44]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003280:	4313      	orrs	r3, r2
 8003282:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3748      	adds	r7, #72	; 0x48
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	10908100 	.word	0x10908100

080032b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e095      	b.n	80033f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032da:	d009      	beq.n	80032f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
 80032e2:	e005      	b.n	80032f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fa62 	bl	80007d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003326:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003330:	d902      	bls.n	8003338 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e002      	b.n	800333e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003346:	d007      	beq.n	8003358 <HAL_SPI_Init+0xa0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003350:	d002      	beq.n	8003358 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	ea42 0103 	orr.w	r1, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	f003 0204 	and.w	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033d4:	ea42 0103 	orr.w	r1, r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e040      	b.n	8003492 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fd fa37 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2224      	movs	r2, #36	; 0x24
 800342a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f82d 	bl	800349c <UART_SetConfig>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e022      	b.n	8003492 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f957 	bl	8003708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003468:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003478:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9de 	bl	800384c <UART_CheckIdleState>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b8a      	ldr	r3, [pc, #552]	; (80036f0 <UART_SetConfig+0x254>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a78      	ldr	r2, [pc, #480]	; (80036f4 <UART_SetConfig+0x258>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d120      	bne.n	800355a <UART_SetConfig+0xbe>
 8003518:	4b77      	ldr	r3, [pc, #476]	; (80036f8 <UART_SetConfig+0x25c>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d817      	bhi.n	8003554 <UART_SetConfig+0xb8>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x90>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003549 	.word	0x08003549
 8003534:	0800354f 	.word	0x0800354f
 8003538:	08003543 	.word	0x08003543
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e01d      	b.n	800357e <UART_SetConfig+0xe2>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e01a      	b.n	800357e <UART_SetConfig+0xe2>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e017      	b.n	800357e <UART_SetConfig+0xe2>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e014      	b.n	800357e <UART_SetConfig+0xe2>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e011      	b.n	800357e <UART_SetConfig+0xe2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a67      	ldr	r2, [pc, #412]	; (80036fc <UART_SetConfig+0x260>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d102      	bne.n	800356a <UART_SetConfig+0xce>
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e009      	b.n	800357e <UART_SetConfig+0xe2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a64      	ldr	r2, [pc, #400]	; (8003700 <UART_SetConfig+0x264>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <UART_SetConfig+0xde>
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e001      	b.n	800357e <UART_SetConfig+0xe2>
 800357a:	2310      	movs	r3, #16
 800357c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003586:	d15a      	bne.n	800363e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003588:	7ffb      	ldrb	r3, [r7, #31]
 800358a:	2b08      	cmp	r3, #8
 800358c:	d827      	bhi.n	80035de <UART_SetConfig+0x142>
 800358e:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <UART_SetConfig+0xf8>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035b9 	.word	0x080035b9
 8003598:	080035c1 	.word	0x080035c1
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	080035df 	.word	0x080035df
 80035a4:	080035cf 	.word	0x080035cf
 80035a8:	080035df 	.word	0x080035df
 80035ac:	080035df 	.word	0x080035df
 80035b0:	080035df 	.word	0x080035df
 80035b4:	080035d7 	.word	0x080035d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b8:	f7ff fd14 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80035bc:	61b8      	str	r0, [r7, #24]
        break;
 80035be:	e013      	b.n	80035e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff fd32 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 80035c4:	61b8      	str	r0, [r7, #24]
        break;
 80035c6:	e00f      	b.n	80035e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c8:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <UART_SetConfig+0x268>)
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e00c      	b.n	80035e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ce:	f7ff fc93 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 80035d2:	61b8      	str	r0, [r7, #24]
        break;
 80035d4:	e008      	b.n	80035e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e004      	b.n	80035e8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	77bb      	strb	r3, [r7, #30]
        break;
 80035e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d074      	beq.n	80036d8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	005a      	lsls	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	441a      	add	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b0f      	cmp	r3, #15
 8003608:	d916      	bls.n	8003638 <UART_SetConfig+0x19c>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d212      	bcs.n	8003638 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f023 030f 	bic.w	r3, r3, #15
 800361a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	b29b      	uxth	r3, r3
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	b29a      	uxth	r2, r3
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	4313      	orrs	r3, r2
 800362c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	89fa      	ldrh	r2, [r7, #14]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	e04f      	b.n	80036d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	77bb      	strb	r3, [r7, #30]
 800363c:	e04c      	b.n	80036d8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d828      	bhi.n	8003696 <UART_SetConfig+0x1fa>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <UART_SetConfig+0x1b0>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003671 	.word	0x08003671
 8003650:	08003679 	.word	0x08003679
 8003654:	08003681 	.word	0x08003681
 8003658:	08003697 	.word	0x08003697
 800365c:	08003687 	.word	0x08003687
 8003660:	08003697 	.word	0x08003697
 8003664:	08003697 	.word	0x08003697
 8003668:	08003697 	.word	0x08003697
 800366c:	0800368f 	.word	0x0800368f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003670:	f7ff fcb8 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8003674:	61b8      	str	r0, [r7, #24]
        break;
 8003676:	e013      	b.n	80036a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7ff fcd6 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 800367c:	61b8      	str	r0, [r7, #24]
        break;
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <UART_SetConfig+0x268>)
 8003682:	61bb      	str	r3, [r7, #24]
        break;
 8003684:	e00c      	b.n	80036a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003686:	f7ff fc37 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 800368a:	61b8      	str	r0, [r7, #24]
        break;
 800368c:	e008      	b.n	80036a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003692:	61bb      	str	r3, [r7, #24]
        break;
 8003694:	e004      	b.n	80036a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	77bb      	strb	r3, [r7, #30]
        break;
 800369e:	bf00      	nop
    }

    if (pclk != 0U)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d018      	beq.n	80036d8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	085a      	lsrs	r2, r3, #1
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	441a      	add	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b0f      	cmp	r3, #15
 80036be:	d909      	bls.n	80036d4 <UART_SetConfig+0x238>
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d205      	bcs.n	80036d4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	e001      	b.n	80036d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	efff69f3 	.word	0xefff69f3
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40004400 	.word	0x40004400
 8003700:	40004800 	.word	0x40004800
 8003704:	007a1200 	.word	0x007a1200

08003708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01a      	beq.n	800381e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003806:	d10a      	bne.n	800381e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b098      	sub	sp, #96	; 0x60
 8003850:	af02      	add	r7, sp, #8
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800385c:	f7fd f94a 	bl	8000af4 <HAL_GetTick>
 8003860:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b08      	cmp	r3, #8
 800386e:	d12e      	bne.n	80038ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f88c 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d021      	beq.n	80038ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e062      	b.n	8003994 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d149      	bne.n	8003970 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e4:	2200      	movs	r2, #0
 80038e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f856 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03c      	beq.n	8003970 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	623b      	str	r3, [r7, #32]
   return(result);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
 8003916:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	60fb      	str	r3, [r7, #12]
   return(result);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003948:	61fa      	str	r2, [r7, #28]
 800394a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	617b      	str	r3, [r7, #20]
   return(result);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e011      	b.n	8003994 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3758      	adds	r7, #88	; 0x58
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ac:	e049      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b4:	d045      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fd f89d 	bl	8000af4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <UART_WaitOnFlagUntilTimeout+0x30>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e048      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d031      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d110      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f838 	bl	8003a6a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2208      	movs	r2, #8
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e029      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1c:	d111      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f81e 	bl	8003a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e00f      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d0a6      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b095      	sub	sp, #84	; 0x54
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40
 8003a92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e6      	bne.n	8003a72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d118      	bne.n	8003b12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e6      	bne.n	8003ae0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b26:	bf00      	nop
 8003b28:	3754      	adds	r7, #84	; 0x54
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <memset>:
 8003b32:	4402      	add	r2, r0
 8003b34:	4603      	mov	r3, r0
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d100      	bne.n	8003b3c <memset+0xa>
 8003b3a:	4770      	bx	lr
 8003b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003b40:	e7f9      	b.n	8003b36 <memset+0x4>
	...

08003b44 <__libc_init_array>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	4d0d      	ldr	r5, [pc, #52]	; (8003b7c <__libc_init_array+0x38>)
 8003b48:	4c0d      	ldr	r4, [pc, #52]	; (8003b80 <__libc_init_array+0x3c>)
 8003b4a:	1b64      	subs	r4, r4, r5
 8003b4c:	10a4      	asrs	r4, r4, #2
 8003b4e:	2600      	movs	r6, #0
 8003b50:	42a6      	cmp	r6, r4
 8003b52:	d109      	bne.n	8003b68 <__libc_init_array+0x24>
 8003b54:	4d0b      	ldr	r5, [pc, #44]	; (8003b84 <__libc_init_array+0x40>)
 8003b56:	4c0c      	ldr	r4, [pc, #48]	; (8003b88 <__libc_init_array+0x44>)
 8003b58:	f000 f818 	bl	8003b8c <_init>
 8003b5c:	1b64      	subs	r4, r4, r5
 8003b5e:	10a4      	asrs	r4, r4, #2
 8003b60:	2600      	movs	r6, #0
 8003b62:	42a6      	cmp	r6, r4
 8003b64:	d105      	bne.n	8003b72 <__libc_init_array+0x2e>
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6c:	4798      	blx	r3
 8003b6e:	3601      	adds	r6, #1
 8003b70:	e7ee      	b.n	8003b50 <__libc_init_array+0xc>
 8003b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b76:	4798      	blx	r3
 8003b78:	3601      	adds	r6, #1
 8003b7a:	e7f2      	b.n	8003b62 <__libc_init_array+0x1e>
 8003b7c:	08003bdc 	.word	0x08003bdc
 8003b80:	08003bdc 	.word	0x08003bdc
 8003b84:	08003bdc 	.word	0x08003bdc
 8003b88:	08003be0 	.word	0x08003be0

08003b8c <_init>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr

08003b98 <_fini>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr
